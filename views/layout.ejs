<!DOCTYPE html>
<html lang="en" ng-app="myApp">
  <head>
    <meta charset="utf-8">
    <!--
        For demonstration purposes, the `title` is dynamically set here based on
        your `sails.config.appName` to show that you can inject data into layouts
        exactly the same way as with your other view templates.
    -->
    <title><%- title %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <!--

      Stylesheets
      ========================

      You can link any CSS, LESS, or image files in your `assets` directory
      as you would normally: using <link/> tags.

    -->
    <link rel="stylesheet" href="styles/importer.css"/>
  </head>

  <body>

    <!-- Top-level navbar: -->
    <div class="navbar navbar-inverse navbar-fixed-top" role="navigation">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Babelfish</a>
        </div>
        <div class="navbar-collapse collapse">
          <div class="navbar-right" role="form">
          </div><!--/.navbar-right -->
        </div><!--/.navbar-collapse -->
      </div>
    </div>

    <!-- Include the view file for the current controller/route -->
    <%- body %>

    <!--

      Client-side Javascript
      ========================

      You can import any js files in your `assets` directory as you would
      normally: using <script></script> tags.

      Here's an example of importing a few dependencies, in order:
    -->

    <!--

      Looking for client-side CoffeeScript or TypeScript?
      ================================================

      CoffeeScript and TypeScript precompilation are not installed by default,
      but if you'd like to mix those features in, it is straightforward to
      `npm install` the relevant grunt community modules and modify your Gruntfile
      to use them.

    -->

    <!--

      Another way: The Asset Linker
      ========================

      Sails supports a Grunt-based asset linker, to automatically inject
      <link> and <script> tags, as well any client-side templates you're using
      into your HTML layouts and views, respecting dependencies.

      You created this Sails app with the asset linker disabled.
      If you change your mind, check out the docs on the subject:
      http://sailsjs.org/#!documentation/asset-management

    -->
      <script src="js/bower_components/jquery/dist/jquery.min.js"></script>
      <script src="js/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    </body>
</html>
